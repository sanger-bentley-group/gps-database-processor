#!/usr/bin/env python

import pandas as pd
import argparse
import sys


def main():
    args = parse_arguments()
    
    try:
        df_results = pd.read_csv(args.results, dtype=str, keep_default_na=False)
    except FileNotFoundError:
        sys.exit(f"Error: {args.results} is not found!")
    
    try:
        df_info = pd.read_csv(args.info, dtype=str, keep_default_na=False)
    except FileNotFoundError:
        sys.exit(f"Error: {args.info} is not found!")

    generate_table2(df_results, df_info, args.assembler)
    generate_table3(df_results)


def generate_table2(df_results, df_info, assembler):
    df_table2 = df_results.copy()

    if (missing_laneids := (set(df_table2["Sample_ID"]) - set(df_info["Lane_id"]))):
        sys.exit(f"Error: Information of the following Lane ID(s) are not provided: {', '.join(missing_laneids)}")

    df_table2 = df_table2.merge(df_info, left_on="Sample_ID", right_on="Lane_id", how="left")

    # Add used assembler based on user input
    df_table2["Assembler"] = assembler
    # Add legacy column
    df_table2["Proportion_of_Het_SNPs"] = "_"

    # Extract and reorder relevant columns
    df_table2 = df_table2[["Lane_id", "Public_name" ,"Assembler", "S.Pneumo_%", "Assembly_Length", "Contigs#", "Ref_Cov_%", "Seq_Depth", "Proportion_of_Het_SNPs", "Overall_QC", "Supplier_name", "Het-SNP#"]]

    # Rename columns that are not in table2 format
    df_table2.rename(
        columns = {
            "S.Pneumo_%":  "Streptococcus_pneumoniae",
            "Assembly_Length":  "Total_length",
            "Contigs#":  "No_of_contigs",
            "Ref_Cov_%":  "Genome_covered",
            "Seq_Depth":  "Depth_of_coverage",
            "Overall_QC":  "QC",
            "Het-SNP#": "Hetsites_50bp"
        },
        inplace=True
    )

    # Output table2 for integration
    df_table2.to_csv("add_to_table2.csv", index=False)


def generate_table3(df_input):
    pass


def parse_arguments():
    parser = argparse.ArgumentParser(
        allow_abbrev=False,
        description='Convert GPS Pipeline results.csv into a gps2-data compatible table2.csv and table3.csv',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        '-r', '--results',
        default='results.csv',
        help='path to results.csv generated by the GPS Pipeline'
    )

    parser.add_argument(
        '-i', '--info',
        default='info.csv',
        help='path to info.csv which contain 3 comma-separated columns: Lane_id, Public_name, Supplier_name'
    )

    parser.add_argument(
        '-a', '--assembler',
        default='SHOVILL',
        help='de novo assembler used in the run'
    )

    return parser.parse_args()


if __name__ == "__main__":
    main()